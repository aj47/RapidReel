/**
* This code was generated by v0 by Vercel.
* @see https://v0.dev/t/VgkU0zZmf19
* Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
*/

/** Add fonts into your Next.js project:

import { Inter } from 'next/font/google'

inter({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
"use client"

import { useEffect, useState } from "react"
import { Dashboard } from "@/components/Dashboard"
import { EasyCategorise } from "@/components/EasyCategorise"
import { NavBar } from "@/components/NavBar"
import { CategoryModal } from "@/components/CategoryModal"

import { useCategoriser, CategoriserProvider } from "./CategoriserContext"

export function Categoriser() {
  return (
    <CategoriserProvider>
      <CategoriserContent />
    </CategoriserProvider>
  );
}

function CategoriserContent() {
  const {
    transcript,
    categories,
    handleTextCategoryChange,
    addCategory,
    updateCategory,
    currentTranscriptIndex,
    isManualCategorization,
    setIsManualCategorization,
    handleCategorize,
    handleNextTranscript,
    handlePreviousTranscript,
  } = useCategoriser()

  const [editingCategory, setEditingCategory] = useState(null)
  const [newCategory, setNewCategory] = useState({ label: "", color: "#000000", shortcut: "" })
  const [isCategoryModalOpen, setIsCategoryModalOpen] = useState(false)

  const handleAddCategory = () => {
    if (newCategory.label && newCategory.color && newCategory.shortcut) {
      addCategory(newCategory)
      setNewCategory({ label: "", color: "#000000", shortcut: "" })
    }
  }

  const handleCategoryEdit = (category) => {
    setEditingCategory(category)
  }

  const handleCategorySave = (updatedCategory) => {
    updateCategory(updatedCategory)
    setEditingCategory(null)
  }

  const handleKeyboardShortcut = (event) => {
    const shortcutIndex = categories.findIndex((category) => category.shortcut === event.key)
    if (shortcutIndex !== -1) {
      handleCategorize(categories[shortcutIndex].id)
    }
  }

  useEffect(() => {
    document.addEventListener("keydown", handleKeyboardShortcut)
    return () => {
      document.removeEventListener("keydown", handleKeyboardShortcut)
    };
  }, [categories, handleKeyboardShortcut])

  const openCategoryModal = () => setIsCategoryModalOpen(true)
  const closeCategoryModal = () => setIsCategoryModalOpen(false)

  return (
    (<div className="flex flex-col h-screen">
      <NavBar 
        isManualCategorization={isManualCategorization}
        setIsManualCategorization={setIsManualCategorization}
        openCategoryModal={openCategoryModal}
      />
      {isManualCategorization ? (
        <Dashboard
          transcript={transcript}
          categories={categories}
          handleTextCategoryChange={handleTextCategoryChange}
          addCategory={addCategory}
          updateCategory={updateCategory}
        />
      ) : (
        <EasyCategorise
          transcript={transcript}
          categories={categories}
          currentTranscriptIndex={currentTranscriptIndex}
          handleCategorize={handleCategorize}
          handlePreviousTranscript={handlePreviousTranscript}
          handleNextTranscript={handleNextTranscript}
        />
      )}
      <CategoryModal isOpen={isCategoryModalOpen} onClose={closeCategoryModal} />
    </div>)
  );
}

function CheckIcon(props) {
  return (
    (<svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round">
      <path d="M20 6 9 17l-5-5" />
    </svg>)
  );
}


function ChevronLeftIcon(props) {
  return (
    (<svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round">
      <path d="m15 18-6-6 6-6" />
    </svg>)
  );
}


function ChevronRightIcon(props) {
  return (
    (<svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round">
      <path d="m9 18 6-6-6-6" />
    </svg>)
  );
}


function FilePenIcon(props) {
  return (
    (<svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round">
      <path d="M12 22h6a2 2 0 0 0 2-2V7l-5-5H6a2 2 0 0 0-2 2v10" />
      <path d="M14 2v4a2 2 0 0 0 2 2h4" />
      <path d="M10.4 12.6a2 2 0 1 1 3 3L8 21l-4 1 1-4Z" />
    </svg>)
  );
}


function MoveVerticalIcon(props) {
  return (
    (<svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round">
      <polyline points="8 18 12 22 16 18" />
      <polyline points="8 6 12 2 16 6" />
      <line x1="12" x2="12" y1="2" y2="22" />
    </svg>)
  );
}


function ShuffleIcon(props) {
  return (
    (<svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round">
      <path d="M2 18h1.4c1.3 0 2.5-.6 3.3-1.7l6.1-8.6c.7-1.1 2-1.7 3.3-1.7H22" />
      <path d="m18 2 4 4-4 4" />
      <path d="M2 6h1.9c1.5 0 2.9.9 3.6 2.2" />
      <path d="M22 18h-5.9c-1.3 0-2.6-.7-3.3-1.8l-.5-.8" />
      <path d="m18 14 4 4-4 4" />
    </svg>)
  );
}


